def gv

pipeline {
    agent any
    parameters {
        choice(name: 'VERSION',choices: ['1.1.0','1.2.0','1.3.0'],description:'')
        booleanParam(name:'executeTest',defaultValue: true,description: '')
    }
    tools {
  maven 'maven3'
    }
    stages {
        stage('init') {
            steps{
                script {
                    gv = load "script.groovy"
                }
            }

        }
        stage('build') {
            steps{
                script {
                    gv.build()
                }
            }
            

        }



        stage('SonarQube analysis 1') {
            steps {
                script {
                    gv.sonar()
                }
            }
        }
        
        //stage("Quality Gate") {
          //  steps {
            //    timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
              //      waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
                //}
            //}
        //}
        stage("Quality Gate") {

         steps {
              sleep(30)
              script {
               def qualitygate = waitForQualityGate()
               if (qualitygate.status != "OK") {
               error "Pipeline aborted due to quality gate failure: ${qualitygate.status}"
               }
              }
            }
          }
        
    }
}
